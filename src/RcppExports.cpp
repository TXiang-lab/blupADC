// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// makeA_cpp
arma::Mat<double> makeA_cpp(arma::Mat<int> Pedigree);
RcppExport SEXP _blupADC_makeA_cpp(SEXP PedigreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    rcpp_result_gen = Rcpp::wrap(makeA_cpp(Pedigree));
    return rcpp_result_gen;
END_RCPP
}
// G_matrix_cpp
List G_matrix_cpp(arma::Mat<int>& M, bool base, bool trace, bool metafounder, bool inverse);
RcppExport SEXP _blupADC_G_matrix_cpp(SEXP MSEXP, SEXP baseSEXP, SEXP traceSEXP, SEXP metafounderSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< bool >::type base(baseSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< bool >::type metafounder(metafounderSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(G_matrix_cpp(M, base, trace, metafounder, inverse));
    return rcpp_result_gen;
END_RCPP
}
// Deviation_matrix_cpp
List Deviation_matrix_cpp(arma::Mat<int>& M, bool inverse, bool base, bool trace);
RcppExport SEXP _blupADC_Deviation_matrix_cpp(SEXP MSEXP, SEXP inverseSEXP, SEXP baseSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< bool >::type base(baseSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(Deviation_matrix_cpp(M, inverse, base, trace));
    return rcpp_result_gen;
END_RCPP
}
// Dominance_matrix_cpp
List Dominance_matrix_cpp(arma::Mat<int>& M, bool inverse, bool base, bool trace);
RcppExport SEXP _blupADC_Dominance_matrix_cpp(SEXP MSEXP, SEXP inverseSEXP, SEXP baseSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< bool >::type base(baseSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(Dominance_matrix_cpp(M, inverse, base, trace));
    return rcpp_result_gen;
END_RCPP
}
// APY_cpp
arma::Mat<double> APY_cpp(arma::Mat<double> G, CharacterVector IND_Proven, CharacterVector IND_G);
RcppExport SEXP _blupADC_APY_cpp(SEXP GSEXP, SEXP IND_ProvenSEXP, SEXP IND_GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<double> >::type G(GSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_Proven(IND_ProvenSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_G(IND_GSEXP);
    rcpp_result_gen = Rcpp::wrap(APY_cpp(G, IND_Proven, IND_G));
    return rcpp_result_gen;
END_RCPP
}
// APY_inverse_cpp
List APY_inverse_cpp(arma::Mat<int>& M, CharacterVector IND_geno, double APY_eigen_threshold, int APY_n_core, bool re_inverse);
RcppExport SEXP _blupADC_APY_inverse_cpp(SEXP MSEXP, SEXP IND_genoSEXP, SEXP APY_eigen_thresholdSEXP, SEXP APY_n_coreSEXP, SEXP re_inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< double >::type APY_eigen_threshold(APY_eigen_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type APY_n_core(APY_n_coreSEXP);
    Rcpp::traits::input_parameter< bool >::type re_inverse(re_inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(APY_inverse_cpp(M, IND_geno, APY_eigen_threshold, APY_n_core, re_inverse));
    return rcpp_result_gen;
END_RCPP
}
// makeAinv_cpp
arma::Mat<double> makeAinv_cpp(arma::Mat<int> Pedigree, bool inbreeding);
RcppExport SEXP _blupADC_makeAinv_cpp(SEXP PedigreeSEXP, SEXP inbreedingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< bool >::type inbreeding(inbreedingSEXP);
    rcpp_result_gen = Rcpp::wrap(makeAinv_cpp(Pedigree, inbreeding));
    return rcpp_result_gen;
END_RCPP
}
// cal_homo_inbred_cpp
DataFrame cal_homo_inbred_cpp(arma::Mat<int>& data_genumeric, CharacterVector IND_geno);
RcppExport SEXP _blupADC_cal_homo_inbred_cpp(SEXP data_genumericSEXP, SEXP IND_genoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_genumeric(data_genumericSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_geno(IND_genoSEXP);
    rcpp_result_gen = Rcpp::wrap(cal_homo_inbred_cpp(data_genumeric, IND_geno));
    return rcpp_result_gen;
END_RCPP
}
// makeInbreeding_cpp
arma::Mat<double> makeInbreeding_cpp(arma::Mat<int> Pedigree);
RcppExport SEXP _blupADC_makeInbreeding_cpp(SEXP PedigreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    rcpp_result_gen = Rcpp::wrap(makeInbreeding_cpp(Pedigree));
    return rcpp_result_gen;
END_RCPP
}
// makeD_cpp
List makeD_cpp(arma::Mat<int> Pedigree, bool inverse);
RcppExport SEXP _blupADC_makeD_cpp(SEXP PedigreeSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(makeD_cpp(Pedigree, inverse));
    return rcpp_result_gen;
END_RCPP
}
// gene_dropping_D
List gene_dropping_D(arma::Mat<int> Pedigree, bool inverse, int iteration, bool diagnoal, int cpu_cores);
RcppExport SEXP _blupADC_gene_dropping_D(SEXP PedigreeSEXP, SEXP inverseSEXP, SEXP iterationSEXP, SEXP diagnoalSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< int >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< bool >::type diagnoal(diagnoalSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(gene_dropping_D(Pedigree, inverse, iteration, diagnoal, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// makeHA_cpp
List makeHA_cpp(arma::Mat<int>& Pedigree, arma::Mat<int>& M, CharacterVector IND_geno, arma::uvec pos_A11, arma::uvec pos_A22, arma::uvec pos_geno, arma::uvec pos_A, arma::uvec pos_H22, bool APY_algorithm, double APY_eigen_threshold, int APY_n_core, bool direct, bool inverse, double omega);
RcppExport SEXP _blupADC_makeHA_cpp(SEXP PedigreeSEXP, SEXP MSEXP, SEXP IND_genoSEXP, SEXP pos_A11SEXP, SEXP pos_A22SEXP, SEXP pos_genoSEXP, SEXP pos_ASEXP, SEXP pos_H22SEXP, SEXP APY_algorithmSEXP, SEXP APY_eigen_thresholdSEXP, SEXP APY_n_coreSEXP, SEXP directSEXP, SEXP inverseSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A11(pos_A11SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A22(pos_A22SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_geno(pos_genoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A(pos_ASEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_H22(pos_H22SEXP);
    Rcpp::traits::input_parameter< bool >::type APY_algorithm(APY_algorithmSEXP);
    Rcpp::traits::input_parameter< double >::type APY_eigen_threshold(APY_eigen_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type APY_n_core(APY_n_coreSEXP);
    Rcpp::traits::input_parameter< bool >::type direct(directSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(makeHA_cpp(Pedigree, M, IND_geno, pos_A11, pos_A22, pos_geno, pos_A, pos_H22, APY_algorithm, APY_eigen_threshold, APY_n_core, direct, inverse, omega));
    return rcpp_result_gen;
END_RCPP
}
// makeHA_metafounder_cpp
List makeHA_metafounder_cpp(arma::Mat<int>& Pedigree, arma::Mat<int>& M, arma::uvec pos_A11, arma::uvec pos_A22, arma::uvec pos_geno, arma::uvec pos_A, arma::uvec pos_H22, bool direct, bool inverse, double omega);
RcppExport SEXP _blupADC_makeHA_metafounder_cpp(SEXP PedigreeSEXP, SEXP MSEXP, SEXP pos_A11SEXP, SEXP pos_A22SEXP, SEXP pos_genoSEXP, SEXP pos_ASEXP, SEXP pos_H22SEXP, SEXP directSEXP, SEXP inverseSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A11(pos_A11SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A22(pos_A22SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_geno(pos_genoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A(pos_ASEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_H22(pos_H22SEXP);
    Rcpp::traits::input_parameter< bool >::type direct(directSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(makeHA_metafounder_cpp(Pedigree, M, pos_A11, pos_A22, pos_geno, pos_A, pos_H22, direct, inverse, omega));
    return rcpp_result_gen;
END_RCPP
}
// makeHD_cpp
List makeHD_cpp(arma::Mat<int>& Pedigree, arma::Mat<int>& M, CharacterVector IND_geno, arma::uvec pos_A11, arma::uvec pos_A22, arma::uvec pos_geno, arma::uvec pos_A, arma::uvec pos_H22, bool gene_dropping, int cpu_cores, int gene_dropping_iteration, bool direct, bool inverse, double omega);
RcppExport SEXP _blupADC_makeHD_cpp(SEXP PedigreeSEXP, SEXP MSEXP, SEXP IND_genoSEXP, SEXP pos_A11SEXP, SEXP pos_A22SEXP, SEXP pos_genoSEXP, SEXP pos_ASEXP, SEXP pos_H22SEXP, SEXP gene_droppingSEXP, SEXP cpu_coresSEXP, SEXP gene_dropping_iterationSEXP, SEXP directSEXP, SEXP inverseSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A11(pos_A11SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A22(pos_A22SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_geno(pos_genoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A(pos_ASEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_H22(pos_H22SEXP);
    Rcpp::traits::input_parameter< bool >::type gene_dropping(gene_droppingSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< int >::type gene_dropping_iteration(gene_dropping_iterationSEXP);
    Rcpp::traits::input_parameter< bool >::type direct(directSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(makeHD_cpp(Pedigree, M, IND_geno, pos_A11, pos_A22, pos_geno, pos_A, pos_H22, gene_dropping, cpu_cores, gene_dropping_iteration, direct, inverse, omega));
    return rcpp_result_gen;
END_RCPP
}
// makeHD_gene_dropping_cpp
List makeHD_gene_dropping_cpp(arma::Mat<int>& Pedigree, arma::Mat<int>& M, CharacterVector IND_geno, arma::uvec pos_A11, arma::uvec pos_A22, arma::uvec pos_geno, arma::uvec pos_A, arma::uvec pos_H22, bool gene_dropping, int cpu_cores, int gene_dropping_iteration, bool direct, bool inverse, double omega);
RcppExport SEXP _blupADC_makeHD_gene_dropping_cpp(SEXP PedigreeSEXP, SEXP MSEXP, SEXP IND_genoSEXP, SEXP pos_A11SEXP, SEXP pos_A22SEXP, SEXP pos_genoSEXP, SEXP pos_ASEXP, SEXP pos_H22SEXP, SEXP gene_droppingSEXP, SEXP cpu_coresSEXP, SEXP gene_dropping_iterationSEXP, SEXP directSEXP, SEXP inverseSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A11(pos_A11SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A22(pos_A22SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_geno(pos_genoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A(pos_ASEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_H22(pos_H22SEXP);
    Rcpp::traits::input_parameter< bool >::type gene_dropping(gene_droppingSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< int >::type gene_dropping_iteration(gene_dropping_iterationSEXP);
    Rcpp::traits::input_parameter< bool >::type direct(directSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(makeHD_gene_dropping_cpp(Pedigree, M, IND_geno, pos_A11, pos_A22, pos_geno, pos_A, pos_H22, gene_dropping, cpu_cores, gene_dropping_iteration, direct, inverse, omega));
    return rcpp_result_gen;
END_RCPP
}
// bigmemory_double_type
SEXP bigmemory_double_type(SEXP pBigMat, std::string numeric_file_name, std::string numeric_file_path, int cpu_cores);
RcppExport SEXP _blupADC_bigmemory_double_type(SEXP pBigMatSEXP, SEXP numeric_file_nameSEXP, SEXP numeric_file_pathSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< std::string >::type numeric_file_name(numeric_file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type numeric_file_path(numeric_file_pathSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(bigmemory_double_type(pBigMat, numeric_file_name, numeric_file_path, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// bigmemory_object_convert
SEXP bigmemory_object_convert(arma::Mat<double>& input_data_numeric, std::string bigmemory_data_name, std::string bigmemory_data_path);
RcppExport SEXP _blupADC_bigmemory_object_convert(SEXP input_data_numericSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<double>& >::type input_data_numeric(input_data_numericSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(bigmemory_object_convert(input_data_numeric, bigmemory_data_name, bigmemory_data_path));
    return rcpp_result_gen;
END_RCPP
}
// makeA_tmp_cpp
arma::Mat<double> makeA_tmp_cpp(arma::Mat<int> Pedigree);
RcppExport SEXP _blupADC_makeA_tmp_cpp(SEXP PedigreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    rcpp_result_gen = Rcpp::wrap(makeA_tmp_cpp(Pedigree));
    return rcpp_result_gen;
END_RCPP
}
// G_matrix_memory_cpp
List G_matrix_memory_cpp(SEXP pBigMat, std::string bigmemory_data_name, std::string bigmemory_data_path, bool base, bool trace, bool metafounder, bool inverse);
RcppExport SEXP _blupADC_G_matrix_memory_cpp(SEXP pBigMatSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP baseSEXP, SEXP traceSEXP, SEXP metafounderSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type base(baseSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< bool >::type metafounder(metafounderSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(G_matrix_memory_cpp(pBigMat, bigmemory_data_name, bigmemory_data_path, base, trace, metafounder, inverse));
    return rcpp_result_gen;
END_RCPP
}
// Deviation_matrix_memory_cpp
List Deviation_matrix_memory_cpp(SEXP pBigMat, std::string bigmemory_data_name, std::string bigmemory_data_path, bool base, bool trace, bool inverse);
RcppExport SEXP _blupADC_Deviation_matrix_memory_cpp(SEXP pBigMatSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP baseSEXP, SEXP traceSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type base(baseSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(Deviation_matrix_memory_cpp(pBigMat, bigmemory_data_name, bigmemory_data_path, base, trace, inverse));
    return rcpp_result_gen;
END_RCPP
}
// Dominance_matrix_memory_cpp
List Dominance_matrix_memory_cpp(SEXP pBigMat, std::string bigmemory_data_name, std::string bigmemory_data_path, bool base, bool trace, bool inverse);
RcppExport SEXP _blupADC_Dominance_matrix_memory_cpp(SEXP pBigMatSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP baseSEXP, SEXP traceSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type base(baseSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(Dominance_matrix_memory_cpp(pBigMat, bigmemory_data_name, bigmemory_data_path, base, trace, inverse));
    return rcpp_result_gen;
END_RCPP
}
// APY_memory_cpp
void APY_memory_cpp(SEXP pBigMat_G, SEXP pBigMat_Ginv, CharacterVector IND_Proven, CharacterVector IND_G);
RcppExport SEXP _blupADC_APY_memory_cpp(SEXP pBigMat_GSEXP, SEXP pBigMat_GinvSEXP, SEXP IND_ProvenSEXP, SEXP IND_GSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_G(pBigMat_GSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_Ginv(pBigMat_GinvSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_Proven(IND_ProvenSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_G(IND_GSEXP);
    APY_memory_cpp(pBigMat_G, pBigMat_Ginv, IND_Proven, IND_G);
    return R_NilValue;
END_RCPP
}
// APY_inverse_memory_cpp
List APY_inverse_memory_cpp(SEXP pBigMat, std::string bigmemory_data_name, std::string bigmemory_data_path, CharacterVector IND_geno, double APY_eigen_threshold, int APY_n_core, bool re_inverse);
RcppExport SEXP _blupADC_APY_inverse_memory_cpp(SEXP pBigMatSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP IND_genoSEXP, SEXP APY_eigen_thresholdSEXP, SEXP APY_n_coreSEXP, SEXP re_inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< double >::type APY_eigen_threshold(APY_eigen_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type APY_n_core(APY_n_coreSEXP);
    Rcpp::traits::input_parameter< bool >::type re_inverse(re_inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(APY_inverse_memory_cpp(pBigMat, bigmemory_data_name, bigmemory_data_path, IND_geno, APY_eigen_threshold, APY_n_core, re_inverse));
    return rcpp_result_gen;
END_RCPP
}
// makeA_memory_cpp
List makeA_memory_cpp(arma::Mat<int> Pedigree, std::string bigmemory_data_name, std::string bigmemory_data_path);
RcppExport SEXP _blupADC_makeA_memory_cpp(SEXP PedigreeSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(makeA_memory_cpp(Pedigree, bigmemory_data_name, bigmemory_data_path));
    return rcpp_result_gen;
END_RCPP
}
// makeAinv_memory_cpp
List makeAinv_memory_cpp(arma::Mat<int> Pedigree, std::string bigmemory_data_name, std::string bigmemory_data_path, bool inbreeding);
RcppExport SEXP _blupADC_makeAinv_memory_cpp(SEXP PedigreeSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP inbreedingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type inbreeding(inbreedingSEXP);
    rcpp_result_gen = Rcpp::wrap(makeAinv_memory_cpp(Pedigree, bigmemory_data_name, bigmemory_data_path, inbreeding));
    return rcpp_result_gen;
END_RCPP
}
// cal_homo_inbred_memory_cpp
DataFrame cal_homo_inbred_memory_cpp(SEXP pBigMat, CharacterVector IND_geno);
RcppExport SEXP _blupADC_cal_homo_inbred_memory_cpp(SEXP pBigMatSEXP, SEXP IND_genoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_geno(IND_genoSEXP);
    rcpp_result_gen = Rcpp::wrap(cal_homo_inbred_memory_cpp(pBigMat, IND_geno));
    return rcpp_result_gen;
END_RCPP
}
// makeInbreeding_memory_cpp
arma::Mat<double> makeInbreeding_memory_cpp(arma::Mat<int> Pedigree);
RcppExport SEXP _blupADC_makeInbreeding_memory_cpp(SEXP PedigreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    rcpp_result_gen = Rcpp::wrap(makeInbreeding_memory_cpp(Pedigree));
    return rcpp_result_gen;
END_RCPP
}
// makeD_memory_cpp
List makeD_memory_cpp(arma::Mat<int> Pedigree, std::string bigmemory_data_name, std::string bigmemory_data_path, bool inverse);
RcppExport SEXP _blupADC_makeD_memory_cpp(SEXP PedigreeSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(makeD_memory_cpp(Pedigree, bigmemory_data_name, bigmemory_data_path, inverse));
    return rcpp_result_gen;
END_RCPP
}
// gene_dropping_memory_D
List gene_dropping_memory_D(arma::Mat<int> Pedigree, std::string bigmemory_data_name, std::string bigmemory_data_path, bool inverse, int iteration, bool diagnoal, int cpu_cores);
RcppExport SEXP _blupADC_gene_dropping_memory_D(SEXP PedigreeSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP inverseSEXP, SEXP iterationSEXP, SEXP diagnoalSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< int >::type iteration(iterationSEXP);
    Rcpp::traits::input_parameter< bool >::type diagnoal(diagnoalSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(gene_dropping_memory_D(Pedigree, bigmemory_data_name, bigmemory_data_path, inverse, iteration, diagnoal, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// makeHA_memory_cpp
List makeHA_memory_cpp(arma::Mat<int>& Pedigree, SEXP pBigMat, CharacterVector IND_geno, std::string bigmemory_data_name, std::string bigmemory_data_path, arma::uvec pos_A11, arma::uvec pos_A22, arma::uvec pos_geno, arma::uvec pos_A, arma::uvec pos_H22, bool APY_algorithm, double APY_eigen_threshold, int APY_n_core, bool direct, bool inverse, double omega);
RcppExport SEXP _blupADC_makeHA_memory_cpp(SEXP PedigreeSEXP, SEXP pBigMatSEXP, SEXP IND_genoSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP pos_A11SEXP, SEXP pos_A22SEXP, SEXP pos_genoSEXP, SEXP pos_ASEXP, SEXP pos_H22SEXP, SEXP APY_algorithmSEXP, SEXP APY_eigen_thresholdSEXP, SEXP APY_n_coreSEXP, SEXP directSEXP, SEXP inverseSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A11(pos_A11SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A22(pos_A22SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_geno(pos_genoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A(pos_ASEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_H22(pos_H22SEXP);
    Rcpp::traits::input_parameter< bool >::type APY_algorithm(APY_algorithmSEXP);
    Rcpp::traits::input_parameter< double >::type APY_eigen_threshold(APY_eigen_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type APY_n_core(APY_n_coreSEXP);
    Rcpp::traits::input_parameter< bool >::type direct(directSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(makeHA_memory_cpp(Pedigree, pBigMat, IND_geno, bigmemory_data_name, bigmemory_data_path, pos_A11, pos_A22, pos_geno, pos_A, pos_H22, APY_algorithm, APY_eigen_threshold, APY_n_core, direct, inverse, omega));
    return rcpp_result_gen;
END_RCPP
}
// makeHA_metafounder_memory_cpp
List makeHA_metafounder_memory_cpp(arma::Mat<int>& Pedigree, SEXP pBigMat, CharacterVector IND_geno, std::string bigmemory_data_name, std::string bigmemory_data_path, arma::uvec pos_A11, arma::uvec pos_A22, arma::uvec pos_geno, arma::uvec pos_A, arma::uvec pos_H22, bool direct, bool inverse, double omega);
RcppExport SEXP _blupADC_makeHA_metafounder_memory_cpp(SEXP PedigreeSEXP, SEXP pBigMatSEXP, SEXP IND_genoSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP pos_A11SEXP, SEXP pos_A22SEXP, SEXP pos_genoSEXP, SEXP pos_ASEXP, SEXP pos_H22SEXP, SEXP directSEXP, SEXP inverseSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A11(pos_A11SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A22(pos_A22SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_geno(pos_genoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A(pos_ASEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_H22(pos_H22SEXP);
    Rcpp::traits::input_parameter< bool >::type direct(directSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(makeHA_metafounder_memory_cpp(Pedigree, pBigMat, IND_geno, bigmemory_data_name, bigmemory_data_path, pos_A11, pos_A22, pos_geno, pos_A, pos_H22, direct, inverse, omega));
    return rcpp_result_gen;
END_RCPP
}
// K_matrix_cal_memory
List K_matrix_cal_memory(SEXP numeric_address, std::string bigmemory_data_name, std::string bigmemory_data_path, CharacterVector IND_geno, arma::Mat<int> Pedigree, arma::uvec pos_A11, arma::uvec pos_A22, arma::uvec pos_geno, arma::uvec pos_A, arma::uvec pos_H22, bool H_A_direct, double omega, bool base, bool trace, bool metafounder, bool inverse, int gene_dropping_iteration, int type, int cpu_cores, bool APY_algorithm, double APY_eigen_threshold, int APY_n_core, bool re_inverse);
RcppExport SEXP _blupADC_K_matrix_cal_memory(SEXP numeric_addressSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP IND_genoSEXP, SEXP PedigreeSEXP, SEXP pos_A11SEXP, SEXP pos_A22SEXP, SEXP pos_genoSEXP, SEXP pos_ASEXP, SEXP pos_H22SEXP, SEXP H_A_directSEXP, SEXP omegaSEXP, SEXP baseSEXP, SEXP traceSEXP, SEXP metafounderSEXP, SEXP inverseSEXP, SEXP gene_dropping_iterationSEXP, SEXP typeSEXP, SEXP cpu_coresSEXP, SEXP APY_algorithmSEXP, SEXP APY_eigen_thresholdSEXP, SEXP APY_n_coreSEXP, SEXP re_inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type numeric_address(numeric_addressSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A11(pos_A11SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A22(pos_A22SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_geno(pos_genoSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_A(pos_ASEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos_H22(pos_H22SEXP);
    Rcpp::traits::input_parameter< bool >::type H_A_direct(H_A_directSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< bool >::type base(baseSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< bool >::type metafounder(metafounderSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< int >::type gene_dropping_iteration(gene_dropping_iterationSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< bool >::type APY_algorithm(APY_algorithmSEXP);
    Rcpp::traits::input_parameter< double >::type APY_eigen_threshold(APY_eigen_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type APY_n_core(APY_n_coreSEXP);
    Rcpp::traits::input_parameter< bool >::type re_inverse(re_inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(K_matrix_cal_memory(numeric_address, bigmemory_data_name, bigmemory_data_path, IND_geno, Pedigree, pos_A11, pos_A22, pos_geno, pos_A, pos_H22, H_A_direct, omega, base, trace, metafounder, inverse, gene_dropping_iteration, type, cpu_cores, APY_algorithm, APY_eigen_threshold, APY_n_core, re_inverse));
    return rcpp_result_gen;
END_RCPP
}
// judge_character_string
LogicalVector judge_character_string(CharacterVector left, String b);
RcppExport SEXP _blupADC_judge_character_string(SEXP leftSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type left(leftSEXP);
    Rcpp::traits::input_parameter< String >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(judge_character_string(left, b));
    return rcpp_result_gen;
END_RCPP
}
// full_generation_conversion
CharacterMatrix full_generation_conversion(CharacterVector generation_names, CharacterMatrix ped);
RcppExport SEXP _blupADC_full_generation_conversion(SEXP generation_namesSEXP, SEXP pedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type generation_names(generation_namesSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix >::type ped(pedSEXP);
    rcpp_result_gen = Rcpp::wrap(full_generation_conversion(generation_names, ped));
    return rcpp_result_gen;
END_RCPP
}
// numeric_overlap_cpp
arma::mat numeric_overlap_cpp(arma::mat numeric, double overlap_threshold, int cpu_cores, bool dis_progress);
RcppExport SEXP _blupADC_numeric_overlap_cpp(SEXP numericSEXP, SEXP overlap_thresholdSEXP, SEXP cpu_coresSEXP, SEXP dis_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type numeric(numericSEXP);
    Rcpp::traits::input_parameter< double >::type overlap_threshold(overlap_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< bool >::type dis_progress(dis_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_overlap_cpp(numeric, overlap_threshold, cpu_cores, dis_progress));
    return rcpp_result_gen;
END_RCPP
}
// get_rest_id
List get_rest_id(List ref, NumericVector ref_index, NumericMatrix phe, int column_n, int group_column, int id_column);
RcppExport SEXP _blupADC_get_rest_id(SEXP refSEXP, SEXP ref_indexSEXP, SEXP pheSEXP, SEXP column_nSEXP, SEXP group_columnSEXP, SEXP id_columnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type ref(refSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ref_index(ref_indexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type phe(pheSEXP);
    Rcpp::traits::input_parameter< int >::type column_n(column_nSEXP);
    Rcpp::traits::input_parameter< int >::type group_column(group_columnSEXP);
    Rcpp::traits::input_parameter< int >::type id_column(id_columnSEXP);
    rcpp_result_gen = Rcpp::wrap(get_rest_id(ref, ref_index, phe, column_n, group_column, id_column));
    return rcpp_result_gen;
END_RCPP
}
// phased_haplotype_to_numeric_cpp
arma::Mat<int> phased_haplotype_to_numeric_cpp(std::vector<int> block_start, std::vector<int> block_end, arma::Mat<int>& data_hap, Rcpp::List& haplotype_allele, int cpu_cores);
RcppExport SEXP _blupADC_phased_haplotype_to_numeric_cpp(SEXP block_startSEXP, SEXP block_endSEXP, SEXP data_hapSEXP, SEXP haplotype_alleleSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type block_start(block_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_end(block_endSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_hap(data_hapSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type haplotype_allele(haplotype_alleleSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(phased_haplotype_to_numeric_cpp(block_start, block_end, data_hap, haplotype_allele, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// phased_haplotype_to_blupf90_cpp
std::vector<std::string> phased_haplotype_to_blupf90_cpp(std::vector<int> block_start, std::vector<int> block_end, arma::Mat<int>& data_hap, CharacterVector IND_name, Rcpp::List& haplotype_allele, int cpu_cores);
RcppExport SEXP _blupADC_phased_haplotype_to_blupf90_cpp(SEXP block_startSEXP, SEXP block_endSEXP, SEXP data_hapSEXP, SEXP IND_nameSEXP, SEXP haplotype_alleleSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type block_start(block_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_end(block_endSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_hap(data_hapSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type haplotype_allele(haplotype_alleleSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(phased_haplotype_to_blupf90_cpp(block_start, block_end, data_hap, IND_name, haplotype_allele, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// unphased_haplotype_to_numeric_cpp
arma::Mat<int> unphased_haplotype_to_numeric_cpp(arma::Mat<int>& data_hap, int cpu_cores);
RcppExport SEXP _blupADC_unphased_haplotype_to_numeric_cpp(SEXP data_hapSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_hap(data_hapSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(unphased_haplotype_to_numeric_cpp(data_hap, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// unphased_haplotype_to_blupf90_cpp
std::vector<std::string> unphased_haplotype_to_blupf90_cpp(arma::Mat<int>& data_hap, CharacterVector IND_name, int cpu_cores);
RcppExport SEXP _blupADC_unphased_haplotype_to_blupf90_cpp(SEXP data_hapSEXP, SEXP IND_nameSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_hap(data_hapSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(unphased_haplotype_to_blupf90_cpp(data_hap, IND_name, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// haplotype_convertion
List haplotype_convertion(arma::Mat<int>& data_hap, std::vector<int> block_start, std::vector<int> block_end, CharacterVector IND_name, int type, int cpu_cores);
RcppExport SEXP _blupADC_haplotype_convertion(SEXP data_hapSEXP, SEXP block_startSEXP, SEXP block_endSEXP, SEXP IND_nameSEXP, SEXP typeSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_hap(data_hapSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_start(block_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_end(block_endSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(haplotype_convertion(data_hap, block_start, block_end, IND_name, type, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// phased_haplotype_to_numeric_memory_cpp
Rcpp::List phased_haplotype_to_numeric_memory_cpp(SEXP pBigMat_hap, SEXP pBigMat_list, std::string numeric_file_name, std::string numeric_file_path, std::vector<int> block_start, std::vector<int> block_end, int cpu_cores);
RcppExport SEXP _blupADC_phased_haplotype_to_numeric_memory_cpp(SEXP pBigMat_hapSEXP, SEXP pBigMat_listSEXP, SEXP numeric_file_nameSEXP, SEXP numeric_file_pathSEXP, SEXP block_startSEXP, SEXP block_endSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_hap(pBigMat_hapSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_list(pBigMat_listSEXP);
    Rcpp::traits::input_parameter< std::string >::type numeric_file_name(numeric_file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type numeric_file_path(numeric_file_pathSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_start(block_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_end(block_endSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(phased_haplotype_to_numeric_memory_cpp(pBigMat_hap, pBigMat_list, numeric_file_name, numeric_file_path, block_start, block_end, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// unphased_haplotype_to_numeric_memory_cpp
void unphased_haplotype_to_numeric_memory_cpp(SEXP pBigMat_hap, SEXP pBigMat_num, int cpu_cores, std::string miss_base, int miss_base_num);
RcppExport SEXP _blupADC_unphased_haplotype_to_numeric_memory_cpp(SEXP pBigMat_hapSEXP, SEXP pBigMat_numSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_hap(pBigMat_hapSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_num(pBigMat_numSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    unphased_haplotype_to_numeric_memory_cpp(pBigMat_hap, pBigMat_num, cpu_cores, miss_base, miss_base_num);
    return R_NilValue;
END_RCPP
}
// phased_haplotype_to_blupf90_memory_cpp
Rcpp::List phased_haplotype_to_blupf90_memory_cpp(std::vector<int> block_start, std::vector<int> block_end, SEXP pBigMat_hap, SEXP pBigMat_list, CharacterVector IND_name, int cpu_cores);
RcppExport SEXP _blupADC_phased_haplotype_to_blupf90_memory_cpp(SEXP block_startSEXP, SEXP block_endSEXP, SEXP pBigMat_hapSEXP, SEXP pBigMat_listSEXP, SEXP IND_nameSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type block_start(block_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_end(block_endSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_hap(pBigMat_hapSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_list(pBigMat_listSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(phased_haplotype_to_blupf90_memory_cpp(block_start, block_end, pBigMat_hap, pBigMat_list, IND_name, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// unphased_haplotype_to_blupf90_memory_cpp
std::vector<std::string> unphased_haplotype_to_blupf90_memory_cpp(SEXP pBigMat_hap, CharacterVector IND_name, int cpu_cores);
RcppExport SEXP _blupADC_unphased_haplotype_to_blupf90_memory_cpp(SEXP pBigMat_hapSEXP, SEXP IND_nameSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_hap(pBigMat_hapSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(unphased_haplotype_to_blupf90_memory_cpp(pBigMat_hap, IND_name, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// hapmap_to_ped_cpp
CharacterMatrix hapmap_to_ped_cpp(CharacterMatrix& data_hmp, int cpu_cores);
RcppExport SEXP _blupADC_hapmap_to_ped_cpp(SEXP data_hmpSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_hmp(data_hmpSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hapmap_to_ped_cpp(data_hmp, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// hapmap_to_numeric_cpp
arma::Mat<int> hapmap_to_numeric_cpp(CharacterMatrix& data_hmp, std::string miss_base, int miss_base_num, int cpu_cores);
RcppExport SEXP _blupADC_hapmap_to_numeric_cpp(SEXP data_hmpSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_hmp(data_hmpSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hapmap_to_numeric_cpp(data_hmp, miss_base, miss_base_num, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// get_blupf90_allele_string_hapmap
std::string get_blupf90_allele_string_hapmap(CharacterVector allele_string_col, CharacterMatrix Ref_type, std::string miss_base, int miss_base_num, int max_length);
RcppExport SEXP _blupADC_get_blupf90_allele_string_hapmap(SEXP allele_string_colSEXP, SEXP Ref_typeSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP, SEXP max_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type allele_string_col(allele_string_colSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix >::type Ref_type(Ref_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    Rcpp::traits::input_parameter< int >::type max_length(max_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_blupf90_allele_string_hapmap(allele_string_col, Ref_type, miss_base, miss_base_num, max_length));
    return rcpp_result_gen;
END_RCPP
}
// hapmap_to_blupf90_cpp
std::vector<std::string> hapmap_to_blupf90_cpp(CharacterMatrix& data_hmp, std::string miss_base, int miss_base_num, int cpu_cores);
RcppExport SEXP _blupADC_hapmap_to_blupf90_cpp(SEXP data_hmpSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_hmp(data_hmpSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hapmap_to_blupf90_cpp(data_hmp, miss_base, miss_base_num, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// hapmap_to_VCF_cpp
CharacterMatrix hapmap_to_VCF_cpp(CharacterMatrix& data_hmp, int cpu_cores, std::string miss_base, std::string phased_symbol);
RcppExport SEXP _blupADC_hapmap_to_VCF_cpp(SEXP data_hmpSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP, SEXP phased_symbolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_hmp(data_hmpSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< std::string >::type phased_symbol(phased_symbolSEXP);
    rcpp_result_gen = Rcpp::wrap(hapmap_to_VCF_cpp(data_hmp, cpu_cores, miss_base, phased_symbol));
    return rcpp_result_gen;
END_RCPP
}
// hapmap_to_VCF_cpp1
CharacterMatrix hapmap_to_VCF_cpp1(CharacterMatrix& data_hmp, int cpu_cores, std::string miss_base, std::string phased_symbol);
RcppExport SEXP _blupADC_hapmap_to_VCF_cpp1(SEXP data_hmpSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP, SEXP phased_symbolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_hmp(data_hmpSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< std::string >::type phased_symbol(phased_symbolSEXP);
    rcpp_result_gen = Rcpp::wrap(hapmap_to_VCF_cpp1(data_hmp, cpu_cores, miss_base, phased_symbol));
    return rcpp_result_gen;
END_RCPP
}
// hapmap_convertion
List hapmap_convertion(CharacterMatrix& data_hmp, int type, std::string miss_base, std::string phased_symbol, int miss_base_num, int cpu_cores);
RcppExport SEXP _blupADC_hapmap_convertion(SEXP data_hmpSEXP, SEXP typeSEXP, SEXP miss_baseSEXP, SEXP phased_symbolSEXP, SEXP miss_base_numSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_hmp(data_hmpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< std::string >::type phased_symbol(phased_symbolSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hapmap_convertion(data_hmp, type, miss_base, phased_symbol, miss_base_num, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// hapmap_to_numeric_memory_cpp
void hapmap_to_numeric_memory_cpp(CharacterMatrix& data_hmp, SEXP pBigMat_num, std::string miss_base, int miss_base_num, int cpu_cores, std::string type);
RcppExport SEXP _blupADC_hapmap_to_numeric_memory_cpp(SEXP data_hmpSEXP, SEXP pBigMat_numSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP, SEXP cpu_coresSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_hmp(data_hmpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_num(pBigMat_numSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    hapmap_to_numeric_memory_cpp(data_hmp, pBigMat_num, miss_base, miss_base_num, cpu_cores, type);
    return R_NilValue;
END_RCPP
}
// plink_to_numeric_memory_cpp
void plink_to_numeric_memory_cpp(CharacterMatrix& data_ped, CharacterMatrix data_map, SEXP pBigMat_num, int cpu_cores, std::string miss_base, int miss_base_num, std::string type);
RcppExport SEXP _blupADC_plink_to_numeric_memory_cpp(SEXP data_pedSEXP, SEXP data_mapSEXP, SEXP pBigMat_numSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_ped(data_pedSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix >::type data_map(data_mapSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_num(pBigMat_numSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    plink_to_numeric_memory_cpp(data_ped, data_map, pBigMat_num, cpu_cores, miss_base, miss_base_num, type);
    return R_NilValue;
END_RCPP
}
// blupf90_to_numeric_memory_cpp
void blupf90_to_numeric_memory_cpp(std::vector<std::string>& data_blupf90, SEXP pBigMat_num, int cpu_cores, std::string type);
RcppExport SEXP _blupADC_blupf90_to_numeric_memory_cpp(SEXP data_blupf90SEXP, SEXP pBigMat_numSEXP, SEXP cpu_coresSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type data_blupf90(data_blupf90SEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_num(pBigMat_numSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    blupf90_to_numeric_memory_cpp(data_blupf90, pBigMat_num, cpu_cores, type);
    return R_NilValue;
END_RCPP
}
// numeric_to_blupf90_cpp
std::vector<std::string> numeric_to_blupf90_cpp(arma::Mat<int>& data_numeric, CharacterVector IND_name, int cpu_cores);
RcppExport SEXP _blupADC_numeric_to_blupf90_cpp(SEXP data_numericSEXP, SEXP IND_nameSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_numeric(data_numericSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_to_blupf90_cpp(data_numeric, IND_name, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// numeric_to_hapmap_cpp
CharacterMatrix numeric_to_hapmap_cpp(CharacterVector IND_name, CharacterMatrix& data_numeric_map, arma::Mat<int>& data_numeric, int cpu_cores, std::string miss_base);
RcppExport SEXP _blupADC_numeric_to_hapmap_cpp(SEXP IND_nameSEXP, SEXP data_numeric_mapSEXP, SEXP data_numericSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_numeric_map(data_numeric_mapSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_numeric(data_numericSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_to_hapmap_cpp(IND_name, data_numeric_map, data_numeric, cpu_cores, miss_base));
    return rcpp_result_gen;
END_RCPP
}
// numeric_to_ped_cpp
CharacterMatrix numeric_to_ped_cpp(CharacterVector IND_name, CharacterMatrix& data_numeric_map, arma::Mat<int>& data_numeric, int cpu_cores, std::string miss_base);
RcppExport SEXP _blupADC_numeric_to_ped_cpp(SEXP IND_nameSEXP, SEXP data_numeric_mapSEXP, SEXP data_numericSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_numeric_map(data_numeric_mapSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_numeric(data_numericSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_to_ped_cpp(IND_name, data_numeric_map, data_numeric, cpu_cores, miss_base));
    return rcpp_result_gen;
END_RCPP
}
// numeric_to_vcf_cpp
CharacterMatrix numeric_to_vcf_cpp(CharacterVector IND_name, CharacterMatrix& data_numeric_map, arma::Mat<int>& data_numeric, std::string phased_symbol, int cpu_cores);
RcppExport SEXP _blupADC_numeric_to_vcf_cpp(SEXP IND_nameSEXP, SEXP data_numeric_mapSEXP, SEXP data_numericSEXP, SEXP phased_symbolSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_numeric_map(data_numeric_mapSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_numeric(data_numericSEXP);
    Rcpp::traits::input_parameter< std::string >::type phased_symbol(phased_symbolSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_to_vcf_cpp(IND_name, data_numeric_map, data_numeric, phased_symbol, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// blupf90_to_numeric_cpp
arma::Mat<int> blupf90_to_numeric_cpp(std::vector<std::string>& data_blupf90, int cpu_cores);
RcppExport SEXP _blupADC_blupf90_to_numeric_cpp(SEXP data_blupf90SEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type data_blupf90(data_blupf90SEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(blupf90_to_numeric_cpp(data_blupf90, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// blupf90_to_hapmap_cpp
CharacterMatrix blupf90_to_hapmap_cpp(CharacterVector IND_name, CharacterMatrix& data_blupf90_map, std::vector<std::string>& data_blupf90, int cpu_cores, std::string miss_base);
RcppExport SEXP _blupADC_blupf90_to_hapmap_cpp(SEXP IND_nameSEXP, SEXP data_blupf90_mapSEXP, SEXP data_blupf90SEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_blupf90_map(data_blupf90_mapSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type data_blupf90(data_blupf90SEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(blupf90_to_hapmap_cpp(IND_name, data_blupf90_map, data_blupf90, cpu_cores, miss_base));
    return rcpp_result_gen;
END_RCPP
}
// blupf90_to_ped_cpp
CharacterMatrix blupf90_to_ped_cpp(CharacterVector IND_name, CharacterMatrix& data_blupf90_map, std::vector<std::string>& data_blupf90, int cpu_cores, std::string miss_base);
RcppExport SEXP _blupADC_blupf90_to_ped_cpp(SEXP IND_nameSEXP, SEXP data_blupf90_mapSEXP, SEXP data_blupf90SEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_blupf90_map(data_blupf90_mapSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type data_blupf90(data_blupf90SEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(blupf90_to_ped_cpp(IND_name, data_blupf90_map, data_blupf90, cpu_cores, miss_base));
    return rcpp_result_gen;
END_RCPP
}
// blupf90_to_vcf_cpp
CharacterMatrix blupf90_to_vcf_cpp(CharacterVector IND_name, CharacterMatrix& data_blupf90_map, std::vector<std::string>& data_blupf90, std::string phased_symbol, int cpu_cores);
RcppExport SEXP _blupADC_blupf90_to_vcf_cpp(SEXP IND_nameSEXP, SEXP data_blupf90_mapSEXP, SEXP data_blupf90SEXP, SEXP phased_symbolSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type IND_name(IND_nameSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_blupf90_map(data_blupf90_mapSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type data_blupf90(data_blupf90SEXP);
    Rcpp::traits::input_parameter< std::string >::type phased_symbol(phased_symbolSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(blupf90_to_vcf_cpp(IND_name, data_blupf90_map, data_blupf90, phased_symbol, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// ped_to_hapmap_cpp
CharacterMatrix ped_to_hapmap_cpp(CharacterMatrix& data_ped, CharacterMatrix data_map, int cpu_cores);
RcppExport SEXP _blupADC_ped_to_hapmap_cpp(SEXP data_pedSEXP, SEXP data_mapSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_ped(data_pedSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix >::type data_map(data_mapSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(ped_to_hapmap_cpp(data_ped, data_map, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// plink_to_vcf_cpp
CharacterMatrix plink_to_vcf_cpp(CharacterMatrix& data_ped, CharacterMatrix data_map, int cpu_cores, std::string miss_base, std::string phased_symbol);
RcppExport SEXP _blupADC_plink_to_vcf_cpp(SEXP data_pedSEXP, SEXP data_mapSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP, SEXP phased_symbolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_ped(data_pedSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix >::type data_map(data_mapSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< std::string >::type phased_symbol(phased_symbolSEXP);
    rcpp_result_gen = Rcpp::wrap(plink_to_vcf_cpp(data_ped, data_map, cpu_cores, miss_base, phased_symbol));
    return rcpp_result_gen;
END_RCPP
}
// plink_to_numeric_cpp
arma::Mat<int> plink_to_numeric_cpp(CharacterMatrix& data_ped, CharacterMatrix data_map, int cpu_cores, std::string miss_base, int miss_base_num);
RcppExport SEXP _blupADC_plink_to_numeric_cpp(SEXP data_pedSEXP, SEXP data_mapSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_ped(data_pedSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix >::type data_map(data_mapSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    rcpp_result_gen = Rcpp::wrap(plink_to_numeric_cpp(data_ped, data_map, cpu_cores, miss_base, miss_base_num));
    return rcpp_result_gen;
END_RCPP
}
// get_blupf90_allele_string_plink
std::string get_blupf90_allele_string_plink(CharacterVector& allele_string_row, CharacterMatrix& Ref_type, std::string miss_base, int miss_base_num, int max_length);
RcppExport SEXP _blupADC_get_blupf90_allele_string_plink(SEXP allele_string_rowSEXP, SEXP Ref_typeSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP, SEXP max_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector& >::type allele_string_row(allele_string_rowSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type Ref_type(Ref_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    Rcpp::traits::input_parameter< int >::type max_length(max_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_blupf90_allele_string_plink(allele_string_row, Ref_type, miss_base, miss_base_num, max_length));
    return rcpp_result_gen;
END_RCPP
}
// plink_to_blupf90_cpp
std::vector<std::string> plink_to_blupf90_cpp(CharacterMatrix& data_ped, CharacterMatrix data_map, int cpu_cores, std::string miss_base, int miss_base_num);
RcppExport SEXP _blupADC_plink_to_blupf90_cpp(SEXP data_pedSEXP, SEXP data_mapSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_ped(data_pedSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix >::type data_map(data_mapSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    rcpp_result_gen = Rcpp::wrap(plink_to_blupf90_cpp(data_ped, data_map, cpu_cores, miss_base, miss_base_num));
    return rcpp_result_gen;
END_RCPP
}
// plink_convertion
List plink_convertion(CharacterMatrix& data_ped, CharacterMatrix& data_map, int type, std::string miss_base, std::string phased_symbol, int miss_base_num, int cpu_cores);
RcppExport SEXP _blupADC_plink_convertion(SEXP data_pedSEXP, SEXP data_mapSEXP, SEXP typeSEXP, SEXP miss_baseSEXP, SEXP phased_symbolSEXP, SEXP miss_base_numSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_ped(data_pedSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_map(data_mapSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< std::string >::type phased_symbol(phased_symbolSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(plink_convertion(data_ped, data_map, type, miss_base, phased_symbol, miss_base_num, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// cumulativeSum
void cumulativeSum(const std::vector<int> input, std::vector<int>& result);
RcppExport SEXP _blupADC_cumulativeSum(SEXP inputSEXP, SEXP resultSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int> >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type result(resultSEXP);
    cumulativeSum(input, result);
    return R_NilValue;
END_RCPP
}
// paste_vec_short
std::string paste_vec_short(arma::Col<int>& data);
RcppExport SEXP _blupADC_paste_vec_short(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<int>& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(paste_vec_short(data));
    return rcpp_result_gen;
END_RCPP
}
// get_haplotype_set_short
std::vector<int> get_haplotype_set_short(arma::Mat<int>& data_haplotype);
RcppExport SEXP _blupADC_get_haplotype_set_short(SEXP data_haplotypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_haplotype(data_haplotypeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_haplotype_set_short(data_haplotype));
    return rcpp_result_gen;
END_RCPP
}
// allele_get_haplotype_set_short
void allele_get_haplotype_set_short(arma::Mat<int>& data_haplotype, Rcpp::List& haplotype_allele, int i_pos);
RcppExport SEXP _blupADC_allele_get_haplotype_set_short(SEXP data_haplotypeSEXP, SEXP haplotype_alleleSEXP, SEXP i_posSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type data_haplotype(data_haplotypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type haplotype_allele(haplotype_alleleSEXP);
    Rcpp::traits::input_parameter< int >::type i_pos(i_posSEXP);
    allele_get_haplotype_set_short(data_haplotype, haplotype_allele, i_pos);
    return R_NilValue;
END_RCPP
}
// define_block_window_kb_cpp
List define_block_window_kb_cpp(std::vector<int> block1, std::vector<int> block2, std::vector<int> tmp_data_map_3);
RcppExport SEXP _blupADC_define_block_window_kb_cpp(SEXP block1SEXP, SEXP block2SEXP, SEXP tmp_data_map_3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type block1(block1SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block2(block2SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type tmp_data_map_3(tmp_data_map_3SEXP);
    rcpp_result_gen = Rcpp::wrap(define_block_window_kb_cpp(block1, block2, tmp_data_map_3));
    return rcpp_result_gen;
END_RCPP
}
// single_base_factor_cpp
std::string single_base_factor_cpp(CharacterVector data, std::string miss_base);
RcppExport SEXP _blupADC_single_base_factor_cpp(SEXP dataSEXP, SEXP miss_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(single_base_factor_cpp(data, miss_base));
    return rcpp_result_gen;
END_RCPP
}
// pair_base_factor_cpp
std::string pair_base_factor_cpp(CharacterVector data, std::string miss_base);
RcppExport SEXP _blupADC_pair_base_factor_cpp(SEXP dataSEXP, SEXP miss_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(pair_base_factor_cpp(data, miss_base));
    return rcpp_result_gen;
END_RCPP
}
// get_blupf90_allele_string_phased_vcf
std::string get_blupf90_allele_string_phased_vcf(arma::Col<int> allele_string_col1, arma::Col<int> allele_string_col2, int max_length, std::vector<int> cumsum_haplo_type_num, int n_snp);
RcppExport SEXP _blupADC_get_blupf90_allele_string_phased_vcf(SEXP allele_string_col1SEXP, SEXP allele_string_col2SEXP, SEXP max_lengthSEXP, SEXP cumsum_haplo_type_numSEXP, SEXP n_snpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<int> >::type allele_string_col1(allele_string_col1SEXP);
    Rcpp::traits::input_parameter< arma::Col<int> >::type allele_string_col2(allele_string_col2SEXP);
    Rcpp::traits::input_parameter< int >::type max_length(max_lengthSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type cumsum_haplo_type_num(cumsum_haplo_type_numSEXP);
    Rcpp::traits::input_parameter< int >::type n_snp(n_snpSEXP);
    rcpp_result_gen = Rcpp::wrap(get_blupf90_allele_string_phased_vcf(allele_string_col1, allele_string_col2, max_length, cumsum_haplo_type_num, n_snp));
    return rcpp_result_gen;
END_RCPP
}
// get_blupf90_allele_string_numeric
std::string get_blupf90_allele_string_numeric(arma::Row<int> allele_string_row, int max_length);
RcppExport SEXP _blupADC_get_blupf90_allele_string_numeric(SEXP allele_string_rowSEXP, SEXP max_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Row<int> >::type allele_string_row(allele_string_rowSEXP);
    Rcpp::traits::input_parameter< int >::type max_length(max_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_blupf90_allele_string_numeric(allele_string_row, max_length));
    return rcpp_result_gen;
END_RCPP
}
// make_bigmemory_object_cpp
SEXP make_bigmemory_object_cpp(int nrow, int ncol, std::string file_name, std::string file_path, std::string type);
RcppExport SEXP _blupADC_make_bigmemory_object_cpp(SEXP nrowSEXP, SEXP ncolSEXP, SEXP file_nameSEXP, SEXP file_pathSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_path(file_pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(make_bigmemory_object_cpp(nrow, ncol, file_name, file_path, type));
    return rcpp_result_gen;
END_RCPP
}
// make_bigmemory_object_address_cpp
SEXP make_bigmemory_object_address_cpp(int nrow, int ncol, std::string file_name, std::string file_path, std::string type);
RcppExport SEXP _blupADC_make_bigmemory_object_address_cpp(SEXP nrowSEXP, SEXP ncolSEXP, SEXP file_nameSEXP, SEXP file_pathSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_path(file_pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(make_bigmemory_object_address_cpp(nrow, ncol, file_name, file_path, type));
    return rcpp_result_gen;
END_RCPP
}
// NumericMatrix_to_arma
arma::Mat<int> NumericMatrix_to_arma(NumericMatrix& data_numeric);
RcppExport SEXP _blupADC_NumericMatrix_to_arma(SEXP data_numericSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type data_numeric(data_numericSEXP);
    rcpp_result_gen = Rcpp::wrap(NumericMatrix_to_arma(data_numeric));
    return rcpp_result_gen;
END_RCPP
}
// DataFrame_to_arma
arma::Mat<int> DataFrame_to_arma(DataFrame& data_numeric);
RcppExport SEXP _blupADC_DataFrame_to_arma(SEXP data_numericSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type data_numeric(data_numericSEXP);
    rcpp_result_gen = Rcpp::wrap(DataFrame_to_arma(data_numeric));
    return rcpp_result_gen;
END_RCPP
}
// get_offspring_generation_cpp
IntegerVector get_offspring_generation_cpp(DataFrame ped, CharacterVector IND_base);
RcppExport SEXP _blupADC_get_offspring_generation_cpp(SEXP pedSEXP, SEXP IND_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type ped(pedSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type IND_base(IND_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(get_offspring_generation_cpp(ped, IND_base));
    return rcpp_result_gen;
END_RCPP
}
// single_pedigree_cpp
List single_pedigree_cpp(CharacterMatrix ped);
RcppExport SEXP _blupADC_single_pedigree_cpp(SEXP pedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type ped(pedSEXP);
    rcpp_result_gen = Rcpp::wrap(single_pedigree_cpp(ped));
    return rcpp_result_gen;
END_RCPP
}
// get_blupf90_allele_string_unphased_haplotype
std::string get_blupf90_allele_string_unphased_haplotype(arma::Col<int> allele_string_col1, arma::Col<int> allele_string_col2, int max_length);
RcppExport SEXP _blupADC_get_blupf90_allele_string_unphased_haplotype(SEXP allele_string_col1SEXP, SEXP allele_string_col2SEXP, SEXP max_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Col<int> >::type allele_string_col1(allele_string_col1SEXP);
    Rcpp::traits::input_parameter< arma::Col<int> >::type allele_string_col2(allele_string_col2SEXP);
    Rcpp::traits::input_parameter< int >::type max_length(max_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_blupf90_allele_string_unphased_haplotype(allele_string_col1, allele_string_col2, max_length));
    return rcpp_result_gen;
END_RCPP
}
// union_cpp
CharacterVector union_cpp(CharacterVector X, CharacterVector Y);
RcppExport SEXP _blupADC_union_cpp(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(union_cpp(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// delete_bigmemory_file_cpp
void delete_bigmemory_file_cpp(std::string matrix_type, std::string bigmemory_data_name, std::string bigmemory_data_path, bool message);
RcppExport SEXP _blupADC_delete_bigmemory_file_cpp(SEXP matrix_typeSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type matrix_type(matrix_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type message(messageSEXP);
    delete_bigmemory_file_cpp(matrix_type, bigmemory_data_name, bigmemory_data_path, message);
    return R_NilValue;
END_RCPP
}
// get_allele
arma::Mat<int> get_allele(arma::Mat<int> Pedigree);
RcppExport SEXP _blupADC_get_allele(SEXP PedigreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int> >::type Pedigree(PedigreeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_allele(Pedigree));
    return rcpp_result_gen;
END_RCPP
}
// matrix_col3_old
arma::Mat<double> matrix_col3_old(arma::Mat<double>& G, arma::Col<int> IND_geno, bool det, int cpu_cores, double threshold);
RcppExport SEXP _blupADC_matrix_col3_old(SEXP GSEXP, SEXP IND_genoSEXP, SEXP detSEXP, SEXP cpu_coresSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<double>& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::Col<int> >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< bool >::type det(detSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_col3_old(G, IND_geno, det, cpu_cores, threshold));
    return rcpp_result_gen;
END_RCPP
}
// matrix_col3_memory_old
SEXP matrix_col3_memory_old(SEXP pBigMat, std::string bigmemory_data_name, std::string bigmemory_data_path, arma::Col<int> IND_geno, bool det, int cpu_cores, double threshold);
RcppExport SEXP _blupADC_matrix_col3_memory_old(SEXP pBigMatSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP IND_genoSEXP, SEXP detSEXP, SEXP cpu_coresSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< arma::Col<int> >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< bool >::type det(detSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_col3_memory_old(pBigMat, bigmemory_data_name, bigmemory_data_path, IND_geno, det, cpu_cores, threshold));
    return rcpp_result_gen;
END_RCPP
}
// matrix_col3_memory_alt
SEXP matrix_col3_memory_alt(arma::Mat<double> G, std::string bigmemory_data_name, std::string bigmemory_data_path, arma::Col<int> IND_geno, bool det, int cpu_cores, double threshold);
RcppExport SEXP _blupADC_matrix_col3_memory_alt(SEXP GSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP IND_genoSEXP, SEXP detSEXP, SEXP cpu_coresSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<double> >::type G(GSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< arma::Col<int> >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< bool >::type det(detSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_col3_memory_alt(G, bigmemory_data_name, bigmemory_data_path, IND_geno, det, cpu_cores, threshold));
    return rcpp_result_gen;
END_RCPP
}
// matrix_col3
arma::Mat<double> matrix_col3(arma::Mat<double>& G, arma::Col<int> IND_geno, bool det, int cpu_cores, double threshold);
RcppExport SEXP _blupADC_matrix_col3(SEXP GSEXP, SEXP IND_genoSEXP, SEXP detSEXP, SEXP cpu_coresSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<double>& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::Col<int> >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< bool >::type det(detSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_col3(G, IND_geno, det, cpu_cores, threshold));
    return rcpp_result_gen;
END_RCPP
}
// matrix_col3_memory
SEXP matrix_col3_memory(SEXP pBigMat, std::string bigmemory_data_name, std::string bigmemory_data_path, arma::Col<int> IND_geno, bool det, int cpu_cores, double threshold);
RcppExport SEXP _blupADC_matrix_col3_memory(SEXP pBigMatSEXP, SEXP bigmemory_data_nameSEXP, SEXP bigmemory_data_pathSEXP, SEXP IND_genoSEXP, SEXP detSEXP, SEXP cpu_coresSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_name(bigmemory_data_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bigmemory_data_path(bigmemory_data_pathSEXP);
    Rcpp::traits::input_parameter< arma::Col<int> >::type IND_geno(IND_genoSEXP);
    Rcpp::traits::input_parameter< bool >::type det(detSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_col3_memory(pBigMat, bigmemory_data_name, bigmemory_data_path, IND_geno, det, cpu_cores, threshold));
    return rcpp_result_gen;
END_RCPP
}
// phased_vcf_to_haplotype_cpp
arma::Mat<int> phased_vcf_to_haplotype_cpp(CharacterMatrix& data_vcf, int cpu_cores);
RcppExport SEXP _blupADC_phased_vcf_to_haplotype_cpp(SEXP data_vcfSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(phased_vcf_to_haplotype_cpp(data_vcf, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// phased_vcf_to_numeric_cpp
arma::Mat<int> phased_vcf_to_numeric_cpp(std::vector<int> block_start, std::vector<int> block_end, CharacterMatrix& data_vcf, Rcpp::List& haplotype_allele, int cpu_cores);
RcppExport SEXP _blupADC_phased_vcf_to_numeric_cpp(SEXP block_startSEXP, SEXP block_endSEXP, SEXP data_vcfSEXP, SEXP haplotype_alleleSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type block_start(block_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_end(block_endSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type haplotype_allele(haplotype_alleleSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(phased_vcf_to_numeric_cpp(block_start, block_end, data_vcf, haplotype_allele, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// phased_vcf_to_blupf90_cpp
std::vector<std::string> phased_vcf_to_blupf90_cpp(std::vector<int> block_start, std::vector<int> block_end, CharacterMatrix& data_vcf, Rcpp::List& haplotype_allele, int cpu_cores);
RcppExport SEXP _blupADC_phased_vcf_to_blupf90_cpp(SEXP block_startSEXP, SEXP block_endSEXP, SEXP data_vcfSEXP, SEXP haplotype_alleleSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type block_start(block_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_end(block_endSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type haplotype_allele(haplotype_alleleSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(phased_vcf_to_blupf90_cpp(block_start, block_end, data_vcf, haplotype_allele, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// phased_vcf_to_Plink_cpp
CharacterMatrix phased_vcf_to_Plink_cpp(std::vector<int> block_start, std::vector<int> block_end, CharacterMatrix& data_vcf, Rcpp::List& haplotype_allele, int cpu_cores);
RcppExport SEXP _blupADC_phased_vcf_to_Plink_cpp(SEXP block_startSEXP, SEXP block_endSEXP, SEXP data_vcfSEXP, SEXP haplotype_alleleSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type block_start(block_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_end(block_endSEXP);
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type haplotype_allele(haplotype_alleleSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(phased_vcf_to_Plink_cpp(block_start, block_end, data_vcf, haplotype_allele, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// vcf_to_plink_cpp
CharacterMatrix vcf_to_plink_cpp(CharacterMatrix& data_vcf, int cpu_cores);
RcppExport SEXP _blupADC_vcf_to_plink_cpp(SEXP data_vcfSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_to_plink_cpp(data_vcf, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// vcf_to_hapmap_cpp
CharacterMatrix vcf_to_hapmap_cpp(CharacterMatrix& data_vcf, int cpu_cores, std::string miss_base);
RcppExport SEXP _blupADC_vcf_to_hapmap_cpp(SEXP data_vcfSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_to_hapmap_cpp(data_vcf, cpu_cores, miss_base));
    return rcpp_result_gen;
END_RCPP
}
// unphased_vcf_to_numeric_cpp
arma::Mat<int> unphased_vcf_to_numeric_cpp(CharacterMatrix& data_vcf, int cpu_cores, std::string miss_base, int miss_base_num);
RcppExport SEXP _blupADC_unphased_vcf_to_numeric_cpp(SEXP data_vcfSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    rcpp_result_gen = Rcpp::wrap(unphased_vcf_to_numeric_cpp(data_vcf, cpu_cores, miss_base, miss_base_num));
    return rcpp_result_gen;
END_RCPP
}
// unphased_vcf_to_blupf90_unopenMP
std::vector<std::string> unphased_vcf_to_blupf90_unopenMP(CharacterMatrix& data_vcf, int cpu_cores, std::string miss_base, int miss_base_num);
RcppExport SEXP _blupADC_unphased_vcf_to_blupf90_unopenMP(SEXP data_vcfSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    rcpp_result_gen = Rcpp::wrap(unphased_vcf_to_blupf90_unopenMP(data_vcf, cpu_cores, miss_base, miss_base_num));
    return rcpp_result_gen;
END_RCPP
}
// get_blupf90_allele_string_unphased_vcf
std::string get_blupf90_allele_string_unphased_vcf(CharacterVector allele_string_row, std::string miss_base, int miss_base_num, int max_length);
RcppExport SEXP _blupADC_get_blupf90_allele_string_unphased_vcf(SEXP allele_string_rowSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP, SEXP max_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type allele_string_row(allele_string_rowSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    Rcpp::traits::input_parameter< int >::type max_length(max_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_blupf90_allele_string_unphased_vcf(allele_string_row, miss_base, miss_base_num, max_length));
    return rcpp_result_gen;
END_RCPP
}
// unphased_vcf_to_blupf90_cpp
std::vector<std::string> unphased_vcf_to_blupf90_cpp(CharacterMatrix& data_vcf, int cpu_cores, std::string miss_base, int miss_base_num);
RcppExport SEXP _blupADC_unphased_vcf_to_blupf90_cpp(SEXP data_vcfSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    rcpp_result_gen = Rcpp::wrap(unphased_vcf_to_blupf90_cpp(data_vcf, cpu_cores, miss_base, miss_base_num));
    return rcpp_result_gen;
END_RCPP
}
// vcf_convertion
List vcf_convertion(CharacterMatrix& data_vcf, std::vector<int> block_start, std::vector<int> block_end, int type, std::string miss_base, int miss_base_num, int cpu_cores);
RcppExport SEXP _blupADC_vcf_convertion(SEXP data_vcfSEXP, SEXP block_startSEXP, SEXP block_endSEXP, SEXP typeSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_start(block_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_end(block_endSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_convertion(data_vcf, block_start, block_end, type, miss_base, miss_base_num, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// phased_vcf_to_haplotype_memory_cpp
void phased_vcf_to_haplotype_memory_cpp(const CharacterMatrix& data_vcf, SEXP pBigMat_hap, int cpu_cores);
RcppExport SEXP _blupADC_phased_vcf_to_haplotype_memory_cpp(SEXP data_vcfSEXP, SEXP pBigMat_hapSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_hap(pBigMat_hapSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    phased_vcf_to_haplotype_memory_cpp(data_vcf, pBigMat_hap, cpu_cores);
    return R_NilValue;
END_RCPP
}
// phased_vcf_to_numeric_memory_cpp
Rcpp::List phased_vcf_to_numeric_memory_cpp(SEXP pBigMat_hap, SEXP pBigMat_list, std::string numeric_file_name, std::string numeric_file_path, std::vector<int> block_start, std::vector<int> block_end, const CharacterMatrix& data_vcf, int cpu_cores);
RcppExport SEXP _blupADC_phased_vcf_to_numeric_memory_cpp(SEXP pBigMat_hapSEXP, SEXP pBigMat_listSEXP, SEXP numeric_file_nameSEXP, SEXP numeric_file_pathSEXP, SEXP block_startSEXP, SEXP block_endSEXP, SEXP data_vcfSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_hap(pBigMat_hapSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_list(pBigMat_listSEXP);
    Rcpp::traits::input_parameter< std::string >::type numeric_file_name(numeric_file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type numeric_file_path(numeric_file_pathSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_start(block_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_end(block_endSEXP);
    Rcpp::traits::input_parameter< const CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(phased_vcf_to_numeric_memory_cpp(pBigMat_hap, pBigMat_list, numeric_file_name, numeric_file_path, block_start, block_end, data_vcf, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}
// unphased_vcf_to_numeric_memory_cpp
void unphased_vcf_to_numeric_memory_cpp(SEXP pBigMat_num, const CharacterMatrix& data_vcf, int cpu_cores, std::string miss_base, int miss_base_num);
RcppExport SEXP _blupADC_unphased_vcf_to_numeric_memory_cpp(SEXP pBigMat_numSEXP, SEXP data_vcfSEXP, SEXP cpu_coresSEXP, SEXP miss_baseSEXP, SEXP miss_base_numSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_num(pBigMat_numSEXP);
    Rcpp::traits::input_parameter< const CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_base(miss_baseSEXP);
    Rcpp::traits::input_parameter< int >::type miss_base_num(miss_base_numSEXP);
    unphased_vcf_to_numeric_memory_cpp(pBigMat_num, data_vcf, cpu_cores, miss_base, miss_base_num);
    return R_NilValue;
END_RCPP
}
// phased_vcf_blupf90_memory_cpp
Rcpp::List phased_vcf_blupf90_memory_cpp(SEXP pBigMat_hap, SEXP pBigMat_list, std::vector<int> block_start, std::vector<int> block_end, const CharacterMatrix& data_vcf, int cpu_cores);
RcppExport SEXP _blupADC_phased_vcf_blupf90_memory_cpp(SEXP pBigMat_hapSEXP, SEXP pBigMat_listSEXP, SEXP block_startSEXP, SEXP block_endSEXP, SEXP data_vcfSEXP, SEXP cpu_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_hap(pBigMat_hapSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat_list(pBigMat_listSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_start(block_startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type block_end(block_endSEXP);
    Rcpp::traits::input_parameter< const CharacterMatrix& >::type data_vcf(data_vcfSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_cores(cpu_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(phased_vcf_blupf90_memory_cpp(pBigMat_hap, pBigMat_list, block_start, block_end, data_vcf, cpu_cores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_blupADC_makeA_cpp", (DL_FUNC) &_blupADC_makeA_cpp, 1},
    {"_blupADC_G_matrix_cpp", (DL_FUNC) &_blupADC_G_matrix_cpp, 5},
    {"_blupADC_Deviation_matrix_cpp", (DL_FUNC) &_blupADC_Deviation_matrix_cpp, 4},
    {"_blupADC_Dominance_matrix_cpp", (DL_FUNC) &_blupADC_Dominance_matrix_cpp, 4},
    {"_blupADC_APY_cpp", (DL_FUNC) &_blupADC_APY_cpp, 3},
    {"_blupADC_APY_inverse_cpp", (DL_FUNC) &_blupADC_APY_inverse_cpp, 5},
    {"_blupADC_makeAinv_cpp", (DL_FUNC) &_blupADC_makeAinv_cpp, 2},
    {"_blupADC_cal_homo_inbred_cpp", (DL_FUNC) &_blupADC_cal_homo_inbred_cpp, 2},
    {"_blupADC_makeInbreeding_cpp", (DL_FUNC) &_blupADC_makeInbreeding_cpp, 1},
    {"_blupADC_makeD_cpp", (DL_FUNC) &_blupADC_makeD_cpp, 2},
    {"_blupADC_gene_dropping_D", (DL_FUNC) &_blupADC_gene_dropping_D, 5},
    {"_blupADC_makeHA_cpp", (DL_FUNC) &_blupADC_makeHA_cpp, 14},
    {"_blupADC_makeHA_metafounder_cpp", (DL_FUNC) &_blupADC_makeHA_metafounder_cpp, 10},
    {"_blupADC_makeHD_cpp", (DL_FUNC) &_blupADC_makeHD_cpp, 14},
    {"_blupADC_makeHD_gene_dropping_cpp", (DL_FUNC) &_blupADC_makeHD_gene_dropping_cpp, 14},
    {"_blupADC_bigmemory_double_type", (DL_FUNC) &_blupADC_bigmemory_double_type, 4},
    {"_blupADC_bigmemory_object_convert", (DL_FUNC) &_blupADC_bigmemory_object_convert, 3},
    {"_blupADC_makeA_tmp_cpp", (DL_FUNC) &_blupADC_makeA_tmp_cpp, 1},
    {"_blupADC_G_matrix_memory_cpp", (DL_FUNC) &_blupADC_G_matrix_memory_cpp, 7},
    {"_blupADC_Deviation_matrix_memory_cpp", (DL_FUNC) &_blupADC_Deviation_matrix_memory_cpp, 6},
    {"_blupADC_Dominance_matrix_memory_cpp", (DL_FUNC) &_blupADC_Dominance_matrix_memory_cpp, 6},
    {"_blupADC_APY_memory_cpp", (DL_FUNC) &_blupADC_APY_memory_cpp, 4},
    {"_blupADC_APY_inverse_memory_cpp", (DL_FUNC) &_blupADC_APY_inverse_memory_cpp, 7},
    {"_blupADC_makeA_memory_cpp", (DL_FUNC) &_blupADC_makeA_memory_cpp, 3},
    {"_blupADC_makeAinv_memory_cpp", (DL_FUNC) &_blupADC_makeAinv_memory_cpp, 4},
    {"_blupADC_cal_homo_inbred_memory_cpp", (DL_FUNC) &_blupADC_cal_homo_inbred_memory_cpp, 2},
    {"_blupADC_makeInbreeding_memory_cpp", (DL_FUNC) &_blupADC_makeInbreeding_memory_cpp, 1},
    {"_blupADC_makeD_memory_cpp", (DL_FUNC) &_blupADC_makeD_memory_cpp, 4},
    {"_blupADC_gene_dropping_memory_D", (DL_FUNC) &_blupADC_gene_dropping_memory_D, 7},
    {"_blupADC_makeHA_memory_cpp", (DL_FUNC) &_blupADC_makeHA_memory_cpp, 16},
    {"_blupADC_makeHA_metafounder_memory_cpp", (DL_FUNC) &_blupADC_makeHA_metafounder_memory_cpp, 13},
    {"_blupADC_K_matrix_cal_memory", (DL_FUNC) &_blupADC_K_matrix_cal_memory, 23},
    {"_blupADC_judge_character_string", (DL_FUNC) &_blupADC_judge_character_string, 2},
    {"_blupADC_full_generation_conversion", (DL_FUNC) &_blupADC_full_generation_conversion, 2},
    {"_blupADC_numeric_overlap_cpp", (DL_FUNC) &_blupADC_numeric_overlap_cpp, 4},
    {"_blupADC_get_rest_id", (DL_FUNC) &_blupADC_get_rest_id, 6},
    {"_blupADC_phased_haplotype_to_numeric_cpp", (DL_FUNC) &_blupADC_phased_haplotype_to_numeric_cpp, 5},
    {"_blupADC_phased_haplotype_to_blupf90_cpp", (DL_FUNC) &_blupADC_phased_haplotype_to_blupf90_cpp, 6},
    {"_blupADC_unphased_haplotype_to_numeric_cpp", (DL_FUNC) &_blupADC_unphased_haplotype_to_numeric_cpp, 2},
    {"_blupADC_unphased_haplotype_to_blupf90_cpp", (DL_FUNC) &_blupADC_unphased_haplotype_to_blupf90_cpp, 3},
    {"_blupADC_haplotype_convertion", (DL_FUNC) &_blupADC_haplotype_convertion, 6},
    {"_blupADC_phased_haplotype_to_numeric_memory_cpp", (DL_FUNC) &_blupADC_phased_haplotype_to_numeric_memory_cpp, 7},
    {"_blupADC_unphased_haplotype_to_numeric_memory_cpp", (DL_FUNC) &_blupADC_unphased_haplotype_to_numeric_memory_cpp, 5},
    {"_blupADC_phased_haplotype_to_blupf90_memory_cpp", (DL_FUNC) &_blupADC_phased_haplotype_to_blupf90_memory_cpp, 6},
    {"_blupADC_unphased_haplotype_to_blupf90_memory_cpp", (DL_FUNC) &_blupADC_unphased_haplotype_to_blupf90_memory_cpp, 3},
    {"_blupADC_hapmap_to_ped_cpp", (DL_FUNC) &_blupADC_hapmap_to_ped_cpp, 2},
    {"_blupADC_hapmap_to_numeric_cpp", (DL_FUNC) &_blupADC_hapmap_to_numeric_cpp, 4},
    {"_blupADC_get_blupf90_allele_string_hapmap", (DL_FUNC) &_blupADC_get_blupf90_allele_string_hapmap, 5},
    {"_blupADC_hapmap_to_blupf90_cpp", (DL_FUNC) &_blupADC_hapmap_to_blupf90_cpp, 4},
    {"_blupADC_hapmap_to_VCF_cpp", (DL_FUNC) &_blupADC_hapmap_to_VCF_cpp, 4},
    {"_blupADC_hapmap_to_VCF_cpp1", (DL_FUNC) &_blupADC_hapmap_to_VCF_cpp1, 4},
    {"_blupADC_hapmap_convertion", (DL_FUNC) &_blupADC_hapmap_convertion, 6},
    {"_blupADC_hapmap_to_numeric_memory_cpp", (DL_FUNC) &_blupADC_hapmap_to_numeric_memory_cpp, 6},
    {"_blupADC_plink_to_numeric_memory_cpp", (DL_FUNC) &_blupADC_plink_to_numeric_memory_cpp, 7},
    {"_blupADC_blupf90_to_numeric_memory_cpp", (DL_FUNC) &_blupADC_blupf90_to_numeric_memory_cpp, 4},
    {"_blupADC_numeric_to_blupf90_cpp", (DL_FUNC) &_blupADC_numeric_to_blupf90_cpp, 3},
    {"_blupADC_numeric_to_hapmap_cpp", (DL_FUNC) &_blupADC_numeric_to_hapmap_cpp, 5},
    {"_blupADC_numeric_to_ped_cpp", (DL_FUNC) &_blupADC_numeric_to_ped_cpp, 5},
    {"_blupADC_numeric_to_vcf_cpp", (DL_FUNC) &_blupADC_numeric_to_vcf_cpp, 5},
    {"_blupADC_blupf90_to_numeric_cpp", (DL_FUNC) &_blupADC_blupf90_to_numeric_cpp, 2},
    {"_blupADC_blupf90_to_hapmap_cpp", (DL_FUNC) &_blupADC_blupf90_to_hapmap_cpp, 5},
    {"_blupADC_blupf90_to_ped_cpp", (DL_FUNC) &_blupADC_blupf90_to_ped_cpp, 5},
    {"_blupADC_blupf90_to_vcf_cpp", (DL_FUNC) &_blupADC_blupf90_to_vcf_cpp, 5},
    {"_blupADC_ped_to_hapmap_cpp", (DL_FUNC) &_blupADC_ped_to_hapmap_cpp, 3},
    {"_blupADC_plink_to_vcf_cpp", (DL_FUNC) &_blupADC_plink_to_vcf_cpp, 5},
    {"_blupADC_plink_to_numeric_cpp", (DL_FUNC) &_blupADC_plink_to_numeric_cpp, 5},
    {"_blupADC_get_blupf90_allele_string_plink", (DL_FUNC) &_blupADC_get_blupf90_allele_string_plink, 5},
    {"_blupADC_plink_to_blupf90_cpp", (DL_FUNC) &_blupADC_plink_to_blupf90_cpp, 5},
    {"_blupADC_plink_convertion", (DL_FUNC) &_blupADC_plink_convertion, 7},
    {"_blupADC_cumulativeSum", (DL_FUNC) &_blupADC_cumulativeSum, 2},
    {"_blupADC_paste_vec_short", (DL_FUNC) &_blupADC_paste_vec_short, 1},
    {"_blupADC_get_haplotype_set_short", (DL_FUNC) &_blupADC_get_haplotype_set_short, 1},
    {"_blupADC_allele_get_haplotype_set_short", (DL_FUNC) &_blupADC_allele_get_haplotype_set_short, 3},
    {"_blupADC_define_block_window_kb_cpp", (DL_FUNC) &_blupADC_define_block_window_kb_cpp, 3},
    {"_blupADC_single_base_factor_cpp", (DL_FUNC) &_blupADC_single_base_factor_cpp, 2},
    {"_blupADC_pair_base_factor_cpp", (DL_FUNC) &_blupADC_pair_base_factor_cpp, 2},
    {"_blupADC_get_blupf90_allele_string_phased_vcf", (DL_FUNC) &_blupADC_get_blupf90_allele_string_phased_vcf, 5},
    {"_blupADC_get_blupf90_allele_string_numeric", (DL_FUNC) &_blupADC_get_blupf90_allele_string_numeric, 2},
    {"_blupADC_make_bigmemory_object_cpp", (DL_FUNC) &_blupADC_make_bigmemory_object_cpp, 5},
    {"_blupADC_make_bigmemory_object_address_cpp", (DL_FUNC) &_blupADC_make_bigmemory_object_address_cpp, 5},
    {"_blupADC_NumericMatrix_to_arma", (DL_FUNC) &_blupADC_NumericMatrix_to_arma, 1},
    {"_blupADC_DataFrame_to_arma", (DL_FUNC) &_blupADC_DataFrame_to_arma, 1},
    {"_blupADC_get_offspring_generation_cpp", (DL_FUNC) &_blupADC_get_offspring_generation_cpp, 2},
    {"_blupADC_single_pedigree_cpp", (DL_FUNC) &_blupADC_single_pedigree_cpp, 1},
    {"_blupADC_get_blupf90_allele_string_unphased_haplotype", (DL_FUNC) &_blupADC_get_blupf90_allele_string_unphased_haplotype, 3},
    {"_blupADC_union_cpp", (DL_FUNC) &_blupADC_union_cpp, 2},
    {"_blupADC_delete_bigmemory_file_cpp", (DL_FUNC) &_blupADC_delete_bigmemory_file_cpp, 4},
    {"_blupADC_get_allele", (DL_FUNC) &_blupADC_get_allele, 1},
    {"_blupADC_matrix_col3_old", (DL_FUNC) &_blupADC_matrix_col3_old, 5},
    {"_blupADC_matrix_col3_memory_old", (DL_FUNC) &_blupADC_matrix_col3_memory_old, 7},
    {"_blupADC_matrix_col3_memory_alt", (DL_FUNC) &_blupADC_matrix_col3_memory_alt, 7},
    {"_blupADC_matrix_col3", (DL_FUNC) &_blupADC_matrix_col3, 5},
    {"_blupADC_matrix_col3_memory", (DL_FUNC) &_blupADC_matrix_col3_memory, 7},
    {"_blupADC_phased_vcf_to_haplotype_cpp", (DL_FUNC) &_blupADC_phased_vcf_to_haplotype_cpp, 2},
    {"_blupADC_phased_vcf_to_numeric_cpp", (DL_FUNC) &_blupADC_phased_vcf_to_numeric_cpp, 5},
    {"_blupADC_phased_vcf_to_blupf90_cpp", (DL_FUNC) &_blupADC_phased_vcf_to_blupf90_cpp, 5},
    {"_blupADC_phased_vcf_to_Plink_cpp", (DL_FUNC) &_blupADC_phased_vcf_to_Plink_cpp, 5},
    {"_blupADC_vcf_to_plink_cpp", (DL_FUNC) &_blupADC_vcf_to_plink_cpp, 2},
    {"_blupADC_vcf_to_hapmap_cpp", (DL_FUNC) &_blupADC_vcf_to_hapmap_cpp, 3},
    {"_blupADC_unphased_vcf_to_numeric_cpp", (DL_FUNC) &_blupADC_unphased_vcf_to_numeric_cpp, 4},
    {"_blupADC_unphased_vcf_to_blupf90_unopenMP", (DL_FUNC) &_blupADC_unphased_vcf_to_blupf90_unopenMP, 4},
    {"_blupADC_get_blupf90_allele_string_unphased_vcf", (DL_FUNC) &_blupADC_get_blupf90_allele_string_unphased_vcf, 4},
    {"_blupADC_unphased_vcf_to_blupf90_cpp", (DL_FUNC) &_blupADC_unphased_vcf_to_blupf90_cpp, 4},
    {"_blupADC_vcf_convertion", (DL_FUNC) &_blupADC_vcf_convertion, 7},
    {"_blupADC_phased_vcf_to_haplotype_memory_cpp", (DL_FUNC) &_blupADC_phased_vcf_to_haplotype_memory_cpp, 3},
    {"_blupADC_phased_vcf_to_numeric_memory_cpp", (DL_FUNC) &_blupADC_phased_vcf_to_numeric_memory_cpp, 8},
    {"_blupADC_unphased_vcf_to_numeric_memory_cpp", (DL_FUNC) &_blupADC_unphased_vcf_to_numeric_memory_cpp, 5},
    {"_blupADC_phased_vcf_blupf90_memory_cpp", (DL_FUNC) &_blupADC_phased_vcf_blupf90_memory_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_blupADC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
